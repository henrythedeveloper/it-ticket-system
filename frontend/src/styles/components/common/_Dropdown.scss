// src/styles/components/common/_Dropdown.scss
// ==========================================================================
// Styles for the Dropdown component.
// ==========================================================================

@use '../../variables' as *; // Use variables for spacing, radii, etc.

.dropdown {
  position: relative; // Establishes positioning context for the menu
  display: inline-block; // Allows dropdown to fit content width

  .dropdown-toggle {
    cursor: pointer;
    // Add any specific styling for the trigger element if needed
    // e.g., padding, border, background for a button-like trigger
  }

  .dropdown-menu {
    position: absolute;
    top: calc(100% + #{$spacing-1}); // Position below the trigger with a small gap
    background-color: var(--surface-bg); // Use CSS var for background
    border: 1px solid var(--border-color); // Use CSS var for border
    border-radius: $border-radius;
    box-shadow: $shadow-lg; // Use CSS var for shadow
    min-width: 180px; // Minimum width for the dropdown
    padding: $spacing-2 0; // Vertical padding
    z-index: $z-index-dropdown; // Ensure it appears above other content
    display: none; // Hidden by default
    flex-direction: column; // Stack items vertically
    transition: background-color $transition-medium, border-color $transition-medium;

    // Positioning modifiers
    &.dropdown-menu-right {
      right: 0;
      left: auto; // Override default left alignment
    }
    &.dropdown-menu-left {
      left: 0;
      right: auto; // Override default right alignment
    }

    // Styling for items within the dropdown (links or buttons)
    a, button {
      display: flex; // Use flex for icon alignment
      align-items: center;
      padding: $spacing-2 $spacing-4;
      text-decoration: none;
      color: var(--text-secondary); // Use CSS var
      text-align: left;
      background: none;
      border: none;
      cursor: pointer;
      width: 100%;
      font-size: $font-size-sm;
      transition: background-color $transition-fast, color $transition-fast;

      &:hover {
        background-color: var(--surface-alt-bg); // Use CSS var for hover background
        color: var(--primary); // Use CSS var for hover text
      }

      // Style icons within dropdown items if present
      svg {
          margin-right: $spacing-2;
          width: 16px; // Consistent icon size
          height: 16px;
          opacity: 0.8;
      }
    }
  }

  // Show menu on hover (simple CSS approach)
  // For click-based dropdowns, you'd control display via React state/classes
  &:hover .dropdown-menu {
    display: flex;
  }

  // Add focus-within styling for keyboard navigation accessibility
  &:focus-within .dropdown-menu {
      display: flex; // Show menu when trigger or an item inside has focus
  }
    &:focus-within .dropdown-toggle {
      // Optional: Add focus style to trigger when menu is open via keyboard
        outline: none;
        box-shadow: 0 0 0 2px rgba(var(--accent-rgb), 0.4); // Example focus ring
    }
}

