// src/styles/global.scss
// ==========================================================================
// Main SCSS entry point. Imports variables, mixins, components, layouts,
// and page-specific styles. Defines global styles.
// Theme overrides are now handled by CSS variables defined in _variables.scss
// via @media (prefers-color-scheme: ...).
// ==========================================================================

// --------------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------------
@use 'variables' as *; // Core design tokens and CSS variable definitions
@use 'mixins';         // Reusable SCSS mixins

// Import component styles
@use './components/forms';
@use './components/tickets/TicketCard';
@use './components/common/modal';

// Import layout styles
@use './layouts/AuthLayout';
@use './layouts/MainLayout';
@use './layouts/PublicLayout';

// Import page-specific styles
@use './pages/dashboard/DashboardPage';
@use './pages/dashboard/ProfilePage';
@use './pages/dashboard/SettingsPage';
@use './pages/dashboard/TaskDetailPage';
@use './pages/dashboard/TasksPage';
@use './pages/dashboard/TicketDetailPage';
@use './pages/dashboard/TicketsPage';
@use './pages/dashboard/UserFormPage';
@use './pages/dashboard/UsersPage';
@use './pages/public/CreateTicketPage';
@use './pages/public/FAQPage';
@use './pages/public/HomePage';

// --------------------------------------------------------------------------
// Base Reset & Global Styles
// --------------------------------------------------------------------------
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

// Helper for icon elements if needed
.icon {
    font-style: normal !important; // Prevent italics
}

html {
  font-size: 16px; // Base font size
  height: 100%;
  // Indicate theme support to browser and potentially use system scrollbars
  color-scheme: light dark;
}

body {
  font-family: $font-family-sans;
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  height: 100%;
  // Use CSS variables defined in _variables.scss
  background-color: var(--body-bg);
  color: var(--text-secondary);
  transition: background-color $transition-medium, color $transition-medium;
}

#root { // Assuming #root is your React mount point
  height: 100%;
}

// --- Headings, Text, Links (using CSS variables) ---
h1, h2, h3, h4, h5, h6 {
  margin-bottom: $spacing-4;
  color: var(--text-primary);
  font-weight: $font-weight-bold;
  line-height: 1.2;
  transition: color $transition-medium; // Smooth theme transition
}
h1 { font-size: $font-size-3xl; }
h2 { font-size: $font-size-2xl; }
h3 { font-size: $font-size-xl; }
h4 { font-size: $font-size-lg; }

p {
  margin-bottom: $spacing-4;
  color: var(--text-secondary);
  transition: color $transition-medium; // Smooth theme transition
}

a {
  color: var(--text-link);
  text-decoration: underline;
  transition: color $transition-fast;
  &:hover { color: var(--text-link-hover); }
}

ul, ol {
  margin-bottom: $spacing-4;
  padding-left: $spacing-5;
}

// --- Common UI Elements (using CSS variables) ---

/* Base Card Style */
.card {
    @include mixins.card-base; // Mixin now uses CSS vars
}

/* Base Button Style */
.btn {
    @include mixins.button-base; // Mixin now uses CSS vars
    // Default to primary variant using CSS vars
    @include mixins.button-variant(--primary, --text-inverted, --primary-dark);

    // Define variants using mixins with CSS variable names
    &.btn-secondary { @include mixins.button-variant(--secondary, --text-inverted, --secondary-dark); }
    &.btn-accent { @include mixins.button-variant(--accent, --text-inverted, --accent-dark); } // Added accent button
    &.btn-danger { @include mixins.button-variant(--error, --text-inverted, --error-dark); }
    &.btn-outline { @include mixins.button-outline-variant(--primary, --text-inverted); }
    &.btn-outline-secondary { @include mixins.button-outline-variant(--secondary, --text-inverted); } // Added outline secondary
    &.btn-sm { padding: $spacing-2 $spacing-4; font-size: $font-size-sm; }
    &.btn-lg { padding: $spacing-4 $spacing-8; font-size: $font-size-lg; }
    &.loading { @include mixins.button-loading; } // Apply loading mixin
}

/* Data Tables */
.table-container { overflow-x: auto; margin-bottom: $spacing-6; }
table {
  width: 100%; border-collapse: collapse;
  th, td {
    padding: $spacing-3;
    text-align: left;
    border-bottom: 1px solid var(--surface-tonal-2); // Use CSS var
    transition: background-color $transition-medium, border-color $transition-medium, color $transition-medium;
  }
  th {
    background-color: var(--surface-tonal-1); // Use CSS var
    font-weight: $font-weight-semibold;
    color: var(--text-primary); // Use CSS var
  }
  td {
    color: var(--text-secondary); // Use CSS var
  }
  tbody tr:hover td { // Use tbody to avoid affecting thead hover
    background-color: var(--surface-tonal-1); // Use CSS var
  }
}

/* Select Element Arrow (Theme specific) */
select {
    // Apply base styles
    @include mixins.form-element-base;
    // Apply arrow using theme-specific background images
    appearance: none;
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem; // Make space for the arrow

    // Define light/dark arrows here, using the actual color hex values
    // This avoids issues with var() in url()
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%231d55e2' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e"); // Light Primary #1d55e2

    @media (prefers-color-scheme: dark) {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%237899ed' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e"); // Dark Primary-700 #7899ed (or adjust as needed)
    }
}


/* Alerts */
.alert {
  padding: $spacing-4; border-radius: $border-radius; margin-bottom: $spacing-4;
  border-width: 1px; border-style: solid;
  transition: background-color $transition-medium, border-color $transition-medium, color $transition-medium;
  // Use CSS variables for alpha backgrounds and text colors
  &.alert-info { background-color: rgba(var(--info-rgb), 0.1); color: var(--info); border-color: rgba(var(--info-rgb), 0.2); }
  &.alert-success { background-color: rgba(var(--success-rgb), 0.1); color: var(--success); border-color: rgba(var(--success-rgb), 0.2); }
  &.alert-warning { background-color: rgba(var(--warning-rgb), 0.1); color: var(--warning); border-color: rgba(var(--warning-rgb), 0.2); }
  &.alert-error { background-color: rgba(var(--error-rgb), 0.1); color: var(--error); border-color: rgba(var(--error-rgb), 0.2); }
}

/* Loaders */
.loader { /* Spinner styles */
  display: inline-block; width: 40px; height: 40px;
  border: 3px solid rgba(var(--primary-rgb), 0.3); // Use primary alpha
  border-radius: 50%;
  border-top-color: var(--primary); // Use CSS var
  animation: spin 1s ease-in-out infinite;
}
@keyframes spin { to { transform: rotate(360deg); } }
.loading { /* Loading container */
  display: flex; flex-direction: column; align-items: center; justify-content: center;
  padding: $spacing-8; color: var(--text-muted); // Use CSS var
  p { margin-top: $spacing-4; }
}

/* Error and Success Messages */
.error-message { background-color: rgba(var(--error-rgb), 0.1); color: var(--error); padding: $spacing-3; border-radius: $border-radius; margin-bottom: $spacing-4; border: 1px solid rgba(var(--error-rgb), 0.3); }
.success-message { background-color: rgba(var(--success-rgb), 0.1); color: var(--success); padding: $spacing-3; border-radius: $border-radius; margin-bottom: $spacing-4; border: 1px solid rgba(var(--success-rgb), 0.3); }

/* Disabled States (Global) */
input:disabled,
select:disabled,
textarea:disabled,
button:disabled {
  background-color: var(--surface-tonal-2) !important; // Use CSS var
  color: var(--text-muted) !important; // Use CSS var
  border-color: var(--surface-tonal-3) !important; // Use CSS var
  cursor: not-allowed !important;
  opacity: 0.7 !important;
  box-shadow: none !important; // Remove focus shadow on disabled
}


// Responsive Utilities
// --------------------------------------------------------------------------
@media (max-width: $breakpoint-md) { .hide-md { display: none; } }
@media (max-width: $breakpoint-sm) {
  .hide-sm { display: none; }
  h1 { font-size: $font-size-2xl; }
  h2 { font-size: $font-size-xl; }
}

