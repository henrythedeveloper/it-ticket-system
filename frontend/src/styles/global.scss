// src/styles/global.scss
// ==========================================================================
// Main SCSS entry point. Imports variables, mixins, components, layouts,
// and page-specific styles. Defines global styles and theme overrides.
// **REVISED: Updated dark mode overrides for new theme map.**
// ==========================================================================

// --------------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------------
@use 'sass:map'; // Import sass:map to access the theme map
@use 'sass:color'; // Import sass:color for color functions
@use 'variables' as *; // Core design tokens and CSS variable definitions
@use 'mixins';         // Reusable SCSS mixins

// Import component styles
@use './components/forms';
@use './components/tickets/TicketCard';

// Import layout styles
@use './layouts/AuthLayout';
@use './layouts/MainLayout';
@use './layouts/PublicLayout';

// Import page-specific styles
@use './pages/dashboard/DashboardPage';
@use './pages/dashboard/ProfilePage';
@use './pages/dashboard/SettingsPage';
@use './pages/dashboard/TaskDetailPage';
@use './pages/dashboard/TasksPage';
@use './pages/dashboard/TicketDetailPage';
@use './pages/dashboard/TicketsPage';
@use './pages/dashboard/UserFormPage';
@use './pages/dashboard/UsersPage';
@use './pages/public/CreateTicketPage';
@use './pages/public/FAQPage';
@use './pages/public/HomePage';

// --------------------------------------------------------------------------
// Base Reset & Global Styles
// --------------------------------------------------------------------------
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

// Helper for icon elements if needed
.icon {
    font-style: normal !important; // Prevent italics
}

html {
  font-size: 16px; // Base font size
  height: 100%;
  color-scheme: light dark; // Indicate theme support to browser
}

body {
  font-family: $font-family-sans;
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  height: 100%;
  background-color: var(--body-bg); // Apply light mode default background
  color: var(--text-secondary);    // Apply light mode default text color
  transition: background-color $transition-medium, color $transition-medium; // Smooth theme transition
}

#root { // Assuming #root is your React mount point
  height: 100%;
}

// --- Headings, Text, Links (using CSS variables) ---
h1, h2, h3, h4, h5, h6 {
  margin-bottom: $spacing-4;
  color: var(--text-primary);
  font-weight: $font-weight-bold;
  line-height: 1.2;
}
h1 { font-size: $font-size-3xl; }
h2 { font-size: $font-size-2xl; }
h3 { font-size: $font-size-xl; }
h4 { font-size: $font-size-lg; }

p {
  margin-bottom: $spacing-4;
  color: var(--text-secondary);
}

a {
  color: var(--text-link);
  text-decoration: underline;
  transition: color $transition-fast;
  &:hover { color: var(--text-link-hover); }
}

ul, ol {
  margin-bottom: $spacing-4;
  padding-left: $spacing-5;
}

// --- Common UI Elements ---

/* Base Card Style */
.card {
    @include mixins.card-base; // Apply base card styles using mixin
}

/* Base Button Style */
.btn {
    @include mixins.button-base; // Apply base button styles
    // Default to primary variant
    @include mixins.button-variant(--primary, --text-inverted, --primary-dark); // Use semantic var names

    // Define variants by extending or using mixins in component styles
    &.btn-secondary { @include mixins.button-variant(--secondary, --text-inverted, --secondary-dark); } // Use semantic var names
    &.btn-danger { @include mixins.button-variant(--error, --text-inverted, --error-dark); } // Assumes --error-dark is defined
    &.btn-outline { @include mixins.button-outline-variant(--primary, --text-inverted); } // Use semantic var names
    &.btn-sm { padding: $spacing-2 $spacing-4; font-size: $font-size-sm; }
    &.btn-lg { padding: $spacing-4 $spacing-8; font-size: $font-size-lg; }
    &.loading { @include mixins.button-loading; } // Apply loading mixin
}

/* Data Tables */
.table-container { overflow-x: auto; margin-bottom: $spacing-6; }
table {
  width: 100%; border-collapse: collapse;
  th, td { padding: $spacing-3; text-align: left; border-bottom: 1px solid var(--border-color); transition: background-color $transition-medium, border-color $transition-medium, color $transition-medium; }
  th { background-color: var(--surface-alt-bg); font-weight: $font-weight-semibold; color: var(--text-primary); }
  td { color: var(--text-secondary); }
  tr:hover td { background-color: var(--surface-alt-bg); }
}

/* Alerts */
.alert {
  padding: $spacing-4; border-radius: $border-radius; margin-bottom: $spacing-4;
  border-width: 1px; border-style: solid;
  // Use CSS variables directly for alpha colors if defined, otherwise use rgba with theme color vars
  &.alert-info { background-color: rgba(var(--info-rgb, 59, 130, 246), 0.1); color: var(--info); border-color: rgba(var(--info-rgb, 59, 130, 246), 0.2); }
  &.alert-success { background-color: rgba(var(--success-rgb, 16, 185, 129), 0.1); color: var(--success); border-color: rgba(var(--success-rgb, 16, 185, 129), 0.2); }
  &.alert-warning { background-color: rgba(var(--warning-rgb, 245, 158, 11), 0.1); color: var(--warning); border-color: rgba(var(--warning-rgb, 245, 158, 11), 0.2); }
  &.alert-error { background-color: rgba(var(--error-rgb, 239, 68, 68), 0.1); color: var(--error); border-color: rgba(var(--error-rgb, 239, 68, 68), 0.2); }
}

/* Loaders */
.loader { /* Spinner styles */
  display: inline-block; width: 40px; height: 40px;
  border: 3px solid rgba(var(--primary-rgb, 60, 67, 83), 0.3); border-radius: 50%; // Use primary alpha
  border-top-color: var(--primary); animation: spin 1s ease-in-out infinite;
}
@keyframes spin { to { transform: rotate(360deg); } }
.loading { /* Loading container */
  display: flex; flex-direction: column; align-items: center; justify-content: center;
  padding: $spacing-8; color: var(--text-muted);
  p { margin-top: $spacing-4; }
}

/* Error and Success Messages */
// Use CSS variables directly for alpha colors if defined, otherwise use rgba
.error-message { background-color: rgba(var(--error-rgb, 239, 68, 68), 0.1); color: var(--error); padding: $spacing-3; border-radius: $border-radius; margin-bottom: $spacing-4; border: 1px solid rgba(var(--error-rgb, 239, 68, 68), 0.3); }
.success-message { background-color: rgba(var(--success-rgb, 16, 185, 129), 0.1); color: var(--success); padding: $spacing-3; border-radius: $border-radius; margin-bottom: $spacing-4; border: 1px solid rgba(var(--success-rgb, 16, 185, 129), 0.3); }

// --------------------------------------------------------------------------
// Dark Mode Overrides
// --------------------------------------------------------------------------
body.dark-mode {
  // --- Override CSS variables using the $themes map ---
  @each $key, $value in map.get($themes, dark) {
    --#{$key}: #{$value};
  }

  // --- Add derived/alpha colors for dark mode ---
    --primary-rgb: #{color.red(map.get(map.get($themes, dark), primary))}, #{color.green(map.get(map.get($themes, dark), primary))}, #{color.blue(map.get(map.get($themes, dark), primary))};
    --success-rgb: #{color.red(map.get(map.get($themes, dark), success))}, #{color.green(map.get(map.get($themes, dark), success))}, #{color.blue(map.get(map.get($themes, dark), success))};
    --error-rgb: #{color.red(map.get(map.get($themes, dark), error))}, #{color.green(map.get(map.get($themes, dark), error))}, #{color.blue(map.get(map.get($themes, dark), error))};
    --warning-rgb: #{color.red(map.get(map.get($themes, dark), warning))}, #{color.green(map.get(map.get($themes, dark), warning))}, #{color.blue(map.get(map.get($themes, dark), warning))};
    --info-rgb: #{color.red(map.get(map.get($themes, dark), info))}, #{color.green(map.get(map.get($themes, dark), info))}, #{color.blue(map.get(map.get($themes, dark), info))};
    --accent-rgb: #{color.red(map.get(map.get($themes, dark), accent))}, #{color.green(map.get(map.get($themes, dark), accent))}, #{color.blue(map.get(map.get($themes, dark), accent))};
    --text-muted-rgb: #{color.red(map.get(map.get($themes, dark), text-muted))}, #{color.green(map.get(map.get($themes, dark), text-muted))}, #{color.blue(map.get(map.get($themes, dark), text-muted))};
    --secondary-rgb: #{color.red(map.get(map.get($themes, dark), secondary))}, #{color.green(map.get(map.get($themes, dark), secondary))}, #{color.blue(map.get(map.get($themes, dark), secondary))};


    --primary-alpha-10: rgba(var(--primary-rgb), 0.1); // Recalculate alpha color

    // Add Alpha Badge Backgrounds based on dark mode state colors
    --badge-info-bg-alpha: rgba(var(--info-rgb), 0.15);
    --badge-success-bg-alpha: rgba(var(--success-rgb), 0.15);
    --badge-warning-bg-alpha: rgba(var(--warning-rgb), 0.15);
    --badge-error-bg-alpha: rgba(var(--error-rgb), 0.15);

    // Define status/urgency colors (can map to state colors or be unique)
    --status-unassigned-color: var(--warning);
    --status-assigned-color: var(--info);
    --status-progress-color: var(--secondary);
    --status-closed-color: var(--text-muted);

    --urgency-low-color: var(--info);
    --urgency-medium-color: var(--success);
    --urgency-high-color: var(--warning);
    --urgency-critical-color: var(--error);

    // Define hover/darker versions if needed by mixins
    --error-dark: #{color.adjust(map.get(map.get($themes, dark), error), $blackness: 10%)};


  // --- Global Dark Mode Element Adjustments ---
  a { color: var(--text-link); &:hover { color: var(--text-link-hover); } }
  h1, h2, h3, h4, h5, h6 { color: var(--text-primary); }
  table th { background-color: var(--surface-alt-bg); color: var(--text-primary); border-bottom-color: var(--border-color); }
  table td { border-bottom-color: var(--border-color); color: var(--text-secondary); }
  table tr:hover td { background-color: var(--surface-alt-bg); }
  .card { background-color: var(--surface-bg); box-shadow: none; border: 1px solid var(--border-color); }

  // Alerts (rely on the overridden CSS variables)
  .alert {
      &.alert-info { background-color: var(--badge-info-bg-alpha); color: var(--info); border-color: rgba(var(--info-rgb), 0.3); }
      &.alert-success { background-color: var(--badge-success-bg-alpha); color: var(--success); border-color: rgba(var(--success-rgb), 0.3); }
      &.alert-warning { background-color: var(--badge-warning-bg-alpha); color: var(--warning); border-color: rgba(var(--warning-rgb), 0.3); }
      &.alert-error { background-color: var(--badge-error-bg-alpha); color: var(--error); border-color: rgba(var(--error-rgb), 0.3); }
  }

  // Disabled form elements (using hardcoded values for better control in dark mode)
  input:disabled, select:disabled, textarea:disabled, button:disabled {
      background-color: #374151 !important; // $gray-700
      color: #6b7280 !important;        // $gray-500
      border-color: #4b5563 !important;   // $gray-600
      cursor: not-allowed !important;
      opacity: 0.7 !important;
    }
}

// --------------------------------------------------------------------------
// Responsive Utilities
// --------------------------------------------------------------------------
@media (max-width: $breakpoint-md) { .hide-md { display: none; } }
@media (max-width: $breakpoint-sm) {
  .hide-sm { display: none; }
  h1 { font-size: $font-size-2xl; }
  h2 { font-size: $font-size-xl; }
}
