// src/styles/_mixins.scss
// ==========================================================================
// Reusable SCSS mixins for common UI patterns.
// Now uses CSS variables directly for colors.
// ==========================================================================

@use 'variables' as *; // Import variables for non-color values (spacing, radii, etc.)

// --------------------------------------------------------------------------
// Card Mixins
// --------------------------------------------------------------------------

// Mixin for base card styles
@mixin card-base {
    background-color: var(--surface-tonal); // Use CSS var
    border: 1px solid var(--border-color); // Use CSS var (mapped to tonal-2)
    border-radius: $border-radius-lg;
    box-shadow: var(--shadow); // Use CSS var for shadow
    padding: $spacing-6;
    transition: background-color $transition-medium, border-color $transition-medium, box-shadow $transition-medium;

    // Optional header/footer styling within the card base
    .card-header {
        background-color: var(--surface-tonal-1); // Use CSS var
        margin: -#{$spacing-6} -#{$spacing-6} $spacing-6; // Adjust based on padding
        padding: $spacing-4 $spacing-6;
        border-bottom: 1px solid var(--border-color); // Use CSS var
        border-radius: $border-radius-lg $border-radius-lg 0 0;
        transition: background-color $transition-medium, border-color $transition-medium;
    }

    .card-footer {
        background-color: var(--surface-tonal-1); // Use CSS var
        margin: $spacing-6 -#{$spacing-6} -#{$spacing-6}; // Adjust based on padding
        padding: $spacing-4 $spacing-6;
        border-top: 1px solid var(--border-color); // Use CSS var
        border-radius: 0 0 $border-radius-lg $border-radius-lg;
        transition: background-color $transition-medium, border-color $transition-medium;
    }
}

// --------------------------------------------------------------------------
// Button Mixins
// --------------------------------------------------------------------------

// Mixin for base button styles
@mixin button-base {
    display: inline-block;
    padding: $spacing-3 $spacing-6;
    border: 1px solid transparent;
    border-radius: $border-radius;
    font-weight: $font-weight-medium;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    transition: background-color $transition-fast, transform $transition-fast, border-color $transition-fast, color $transition-fast, box-shadow $transition-fast;

    &:focus-visible { // Use focus-visible for better accessibility
        outline: none;
        // Use ACCENT color for focus ring for higher visibility
        box-shadow: 0 0 0 3px rgba(var(--accent-rgb), 0.4); // Use CSS var
    }

    &:active:not(:disabled) {
        transform: translateY(1px);
    }

    &:disabled {
        // Disabled styles are handled globally in global.scss using CSS vars
        cursor: not-allowed;
        opacity: 0.7; // Keep opacity for visual cue if needed
    }
}

// Mixin for button color variants (Solid) - Takes CSS variable names as arguments
// Example usage: @include mixins.button-variant(--primary, --text-inverted, --primary-dark);
@mixin button-variant($bg-color-var, $text-color-var, $bg-hover-color-var) {
    background-color: var($bg-color-var);
    color: var($text-color-var);
    border-color: var($bg-color-var); // Ensure border matches bg for solid buttons

    &:hover:not(:disabled) {
        background-color: var($bg-hover-color-var);
        border-color: var($bg-hover-color-var); // Keep border matching hover bg
    }
}

// Mixin for outline button variant - Takes CSS variable names as arguments
// Example usage: @include mixins.button-outline-variant(--primary, --text-inverted);
@mixin button-outline-variant($color-var, $text-hover-color-var) {
    background-color: transparent;
    border: 1px solid var($color-var);
    color: var($color-var);
    &:hover:not(:disabled) {
        background-color: var($color-var);
        color: var($text-hover-color-var);
        border-color: var($color-var); // Keep border matching hover bg
    }
}

// Mixin for secondary outline button (Example specific use case)
// This just calls the generic outline mixin with the secondary variables
@mixin button-outline-secondary {
    @include button-outline-variant(--secondary, --text-inverted);
}


// Mixin for button loading state (spinner)
@mixin button-loading {
    position: relative;
    color: transparent !important; // Hide text
    pointer-events: none; // Prevent clicks while loading

    &::before {
        content: "";
        position: absolute;
        left: 50%; top: 50%;
        transform: translate(-50%, -50%);
        width: 16px; height: 16px;
        // Use a visible border color, typically the intended text color or primary
        border: 2px solid var(--text-inverted); // Assuming spinner is on solid button
        border-top-color: transparent; // Make top transparent for spin effect
        border-radius: 50%;
        animation: spin 0.6s linear infinite;
        opacity: 0.8;
    }
}

// --------------------------------------------------------------------------
// Badge Mixins
// --------------------------------------------------------------------------

// Mixin for base badge styles
@mixin badge-base {
    display: inline-block;
    padding: $spacing-1 $spacing-2;
    border-radius: $border-radius-full;
    font-size: $font-size-xs;
    font-weight: $font-weight-medium;
    text-align: center;
    line-height: 1.4; // Added for better vertical centering
    transition: background-color $transition-medium, color $transition-medium;
}

// Mixin for badges with alpha background based on color variable
// Applies classes directly now, relies on CSS variables set globally
// Usage: Add classes like .badge-info, .badge-success etc. to the HTML element
@mixin badge-alpha-variants {
    // Define classes that map to the CSS variables for alpha backgrounds and text colors
    // These styles are applied when the corresponding class is present on the element
    &.badge-info { background-color: rgba(var(--info-rgb), 0.15); color: var(--info); }
    &.badge-success { background-color: rgba(var(--success-rgb), 0.15); color: var(--success); }
    &.badge-warning { background-color: rgba(var(--warning-rgb), 0.15); color: var(--warning); }
    &.badge-error { background-color: rgba(var(--error-rgb), 0.15); color: var(--error); }
    &.badge-primary { background-color: rgba(var(--primary-rgb), 0.15); color: var(--primary); }
    &.badge-secondary { background-color: rgba(var(--secondary-rgb), 0.15); color: var(--secondary); }
    &.badge-accent { background-color: rgba(var(--accent-rgb), 0.15); color: var(--accent); }

    // Role specific examples (using semantic vars)
    &.badge-admin { background-color: rgba(var(--accent-rgb), 0.15); color: var(--accent); }
    &.badge-staff { background-color: rgba(var(--info-rgb), 0.15); color: var(--info); }

    // Status examples (using semantic vars mapped in _variables)
    &.badge-unassigned { background-color: rgba(var(--warning-rgb), 0.15); color: var(--status-unassigned-color); }
    &.badge-assigned { background-color: rgba(var(--info-rgb), 0.15); color: var(--status-assigned-color); }
    &.badge-progress { background-color: rgba(var(--secondary-rgb), 0.15); color: var(--status-progress-color); }
    &.badge-closed { background-color: rgba(var(--text-muted-rgb), 0.15); color: var(--status-closed-color); }

    // Urgency examples (using semantic vars mapped in _variables)
    &.badge-low { background-color: rgba(var(--info-rgb), 0.15); color: var(--urgency-low-color); }
    &.badge-medium { background-color: rgba(var(--success-rgb), 0.15); color: var(--urgency-medium-color); }
    &.badge-high { background-color: rgba(var(--warning-rgb), 0.15); color: var(--urgency-high-color); }
    &.badge-critical { background-color: rgba(var(--error-rgb), 0.15); color: var(--urgency-critical-color); }
}


// --------------------------------------------------------------------------
// Form Element Mixins
// --------------------------------------------------------------------------

// Mixin for base form input/textarea/select styles
@mixin form-element-base {
    width: 100%;
    padding: $spacing-3;
    border: 1px solid var(--border-color); // Use CSS var (mapped to tonal-2)
    border-radius: $border-radius;
    font-size: $font-size-base;
    background-color: var(--surface-tonal-1); // Use CSS var
    color: var(--text-primary); // Use CSS var
    transition: border-color $transition-fast, box-shadow $transition-fast, background-color $transition-medium, color $transition-medium;

    &:focus {
        border-color: var(--primary); // Use CSS var
        // Use accent color for focus shadow for visibility
        box-shadow: 0 0 0 3px rgba(var(--accent-rgb), 0.2); // Use CSS var
        outline: none;
        background-color: var(--surface-tonal-3); // Use CSS var
    }

    &::placeholder {
        color: var(--text-muted); // Use CSS var
        transition: color $transition-medium;
    }

    &:disabled {
        // Disabled styles are handled globally in global.scss using CSS vars
        cursor: not-allowed;
        opacity: 0.6; // Keep opacity for visual cue if needed
    }
}

// Mixin for select arrow styling
// The actual background-image is now set in global.scss to handle theme switching
@mixin select-arrow {
    appearance: none;
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem; // Make space for the arrow
}


// --------------------------------------------------------------------------
// Animation Mixins (Example)
// --------------------------------------------------------------------------
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

