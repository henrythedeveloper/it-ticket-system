// src/styles/_mixins.scss
// ==========================================================================
// Reusable SCSS mixins for common UI patterns.
// **REVISED: Use accent color for focus rings.**
// ==========================================================================

@use 'variables' as *; // Import variables for use within mixins
@use "sass:map";
// --------------------------------------------------------------------------
// Card Mixins
// --------------------------------------------------------------------------

// Mixin for base card styles
@mixin card-base {
    background-color: var(--surface-bg);
    border: 1px solid var(--border-color);
    border-radius: $border-radius-lg;
    box-shadow: $shadow;
    padding: $spacing-6;
    transition: background-color $transition-medium, border-color $transition-medium;
}

// --------------------------------------------------------------------------
// Button Mixins
// --------------------------------------------------------------------------

// Mixin for base button styles
@mixin button-base {
    display: inline-block;
    padding: $spacing-3 $spacing-6;
    border: 1px solid transparent;
    border-radius: $border-radius;
    font-weight: $font-weight-medium;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    transition: background-color $transition-fast, transform $transition-fast, border-color $transition-fast, color $transition-fast, box-shadow $transition-fast; // Added box-shadow

    &:focus-visible { // Use focus-visible for better accessibility
        outline: none;
        // --- Use ACCENT color for focus ring for higher visibility ---
        // Ensure --accent-rgb is defined in _variables.scss/:root and body.dark-mode
        box-shadow: 0 0 0 3px rgba(var(--accent-rgb), 0.4);
    }

    &:active:not(:disabled) { // Ensure active doesn't apply when disabled
        transform: translateY(1px);
    }

    &:disabled {
        // Styles handled globally now, but ensure cursor/opacity are set
        cursor: not-allowed;
        opacity: 0.7;
    }
}

// Mixin for button color variants (Solid)
@mixin button-variant($bg-color-var, $text-color-var, $bg-hover-color-var) {
    background-color: var($bg-color-var);
    color: var($text-color-var);
    border-color: var($bg-color-var); // Ensure border matches bg for solid buttons

    &:hover:not(:disabled) {
        background-color: var($bg-hover-color-var);
        border-color: var($bg-hover-color-var); // Keep border matching hover bg
    }
}

// Mixin for outline button variant
@mixin button-outline-variant($color-var, $text-hover-color-var) {
    background-color: transparent;
    border: 1px solid var($color-var);
    color: var($color-var);
    &:hover:not(:disabled) {
        background-color: var($color-var);
        color: var($text-hover-color-var);
        border-color: var($color-var); // Keep border matching hover bg
    }
}

// Mixin for secondary outline button (Example specific use case)
@mixin button-outline-secondary {
    // Use secondary variables directly
    background-color: transparent;
    border: 1px solid var(--secondary);
    color: var(--secondary);
    &:hover:not(:disabled) {
        background-color: var(--secondary);
        color: var(--text-inverted); // Or adjust if secondary needs different inverted text
        border-color: var(--secondary);
    }
}


// Mixin for button loading state (spinner)
@mixin button-loading {
    position: relative;
    color: transparent !important; // Hide text
    &::before {
        content: "";
        position: absolute;
        left: 50%; top: 50%;
        transform: translate(-50%, -50%);
        width: 16px; height: 16px;
        border: 2px solid currentColor; // Use currentColor for spinner base
        border-top-color: transparent;
        border-radius: 50%;
        animation: spin 0.6s linear infinite;
        opacity: 0.8;
    }
}

// --------------------------------------------------------------------------
// Badge Mixins
// --------------------------------------------------------------------------

// Mixin for base badge styles
@mixin badge-base {
    display: inline-block;
    padding: $spacing-1 $spacing-2;
    border-radius: $border-radius-full;
    font-size: $font-size-xs;
    font-weight: $font-weight-medium;
    text-align: center;
    line-height: 1.4; // Added for better vertical centering
    transition: background-color $transition-medium, color $transition-medium;
}

// Mixin for badges with alpha background based on color variable
// Assumes variables like --info, --success, --warning, --error, --secondary, --accent are defined
// Assumes corresponding --[color]-rgb variables are defined for rgba()
@mixin badge-alpha-variants {
    // Ensure corresponding CSS variables (--info-rgb, --info etc.) are defined
    &.badge-info { background-color: rgba(var(--info-rgb), 0.15); color: var(--info); }
    &.badge-success { background-color: rgba(var(--success-rgb), 0.15); color: var(--success); }
    &.badge-warning { background-color: rgba(var(--warning-rgb), 0.15); color: var(--warning); }
    &.badge-error { background-color: rgba(var(--error-rgb), 0.15); color: var(--error); }
    &.badge-primary { background-color: rgba(var(--primary-rgb), 0.15); color: var(--primary); }
    &.badge-secondary { background-color: rgba(var(--secondary-rgb), 0.15); color: var(--secondary); }
    &.badge-accent { background-color: rgba(var(--accent-rgb), 0.15); color: var(--accent); } // Accent badge

    // Role specific examples (using semantic vars)
    &.badge-admin { background-color: rgba(var(--accent-rgb), 0.15); color: var(--accent); } // Use accent for admin
    &.badge-staff { background-color: rgba(var(--info-rgb), 0.15); color: var(--info); }

    // Status examples (using semantic vars mapped in _variables)
    &.badge-unassigned { background-color: rgba(var(--warning-rgb), 0.15); color: var(--warning); } // Status vars map to state vars
    &.badge-assigned { background-color: rgba(var(--info-rgb), 0.15); color: var(--info); }
    &.badge-progress { background-color: rgba(var(--secondary-rgb), 0.15); color: var(--secondary); } // Use secondary for progress
    &.badge-closed { background-color: rgba(var(--text-muted-rgb), 0.15); color: var(--text-muted); } // Use text-muted for closed

    // Urgency examples (using semantic vars mapped in _variables)
    &.badge-low { background-color: rgba(var(--info-rgb), 0.15); color: var(--info); }
    &.badge-medium { background-color: rgba(var(--success-rgb), 0.15); color: var(--success); }
    &.badge-high { background-color: rgba(var(--warning-rgb), 0.15); color: var(--warning); }
    &.badge-critical { background-color: rgba(var(--error-rgb), 0.15); color: var(--error); } // Use error for critical
}


// --------------------------------------------------------------------------
// Form Element Mixins
// --------------------------------------------------------------------------

// Mixin for base form input/textarea/select styles
@mixin form-element-base {
    width: 100%;
    padding: $spacing-3;
    border: 1px solid var(--border-color-strong);
    border-radius: $border-radius;
    font-size: $font-size-base;
    background-color: var(--surface-alt-bg); // Use alt bg for contrast
    color: var(--text-primary);
    transition: border-color $transition-fast, box-shadow $transition-fast, background-color $transition-medium, color $transition-medium;

    &:focus {
        // Use primary color for border focus (standard practice)
        border-color: var(--primary);
        // Use accent color for focus shadow for visibility
        box-shadow: 0 0 0 3px rgba(var(--accent-rgb), 0.2); // Lighter shadow
        outline: none;
        background-color: var(--surface-bg); // Slightly change bg on focus
    }

    &::placeholder {
        color: var(--text-muted);
        transition: color $transition-medium;
    }

    &:disabled {
        // Disabled styles handled globally via body.dark-mode
        cursor: not-allowed;
        background-color: var(--surface-alt-bg) !important; // Ensure consistent disabled bg
        opacity: 0.6;
    }
}

// Mixin for select arrow styling (adapts to theme)
@mixin select-arrow {
    appearance: none;
    // Default arrow (light mode) - using primary color
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='#{map.get($themes, light, primary)}' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem; // Make space for the arrow

    // Override arrow color in dark mode using the body class
    body.dark-mode & {
        // Using primary color from dark theme map
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='#{map.get($themes, dark, primary)}' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    }
}


// --------------------------------------------------------------------------
// Animation Mixins (Example)
// --------------------------------------------------------------------------
@keyframes spin {
    to { transform: rotate(360deg); }
}