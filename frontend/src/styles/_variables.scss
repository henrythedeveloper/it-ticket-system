// src/styles/_variables.scss
// ==========================================================================
// Defines the core design tokens for the application, including:
// 1. Theme map for light and dark modes.
// 2. CSS custom properties (:root) derived from the theme map.
// 3. Non-color SCSS variables (typography, spacing, layout, etc.).
// **REVISED: Updated theme map values using the new color scales.**
// ==========================================================================
@use 'sass:map'; // Use sass:map for map functions
@use 'sass:color'; // Use sass:color for color functions

// --------------------------------------------------------------------------
// Theme Map (Updated with specific values from user's new color scales)
// --------------------------------------------------------------------------
$themes: (
  light: (
    // --- Map existing semantic names to new scale values ---
    text:           #030817, // text-950
    background:     #e8eefd, // background-50
    primary:        #1f4fe0, // primary-500
    secondary:      #f95f06, // secondary-500
    accent:         #e31c51, // accent-500

    // Semantic Names (Mapping existing names to new scale values)
    text-primary:    #06102d, // text-900 (darker for headings)
    text-secondary:  #122f87, // text-700 (main body text)
    text-muted:      #7895ed, // text-300 (lighter for hints)
    text-inverted:   #e8edfc, // text-50 (text on colored backgrounds)
    text-link:       #173fb5, // text-600 (link color)
    text-link-hover: #0c1f5a, // text-800 (darker link hover)

    body-bg:         #e8eefd, // background-50
    surface-bg:      #ffffff, // Keep pure white, or use background-0 if added
    surface-alt-bg:  #d1ddfa, // background-100 (slightly darker bg)

    border-color:       #a3baf5, // background-200 (standard border)
    border-color-strong: #7598f0, // background-300 (stronger border)

    // Use the '-500' as the base for primary/secondary/accent if not defined above
    primary-light:     #4b72e7, // primary-400
    primary-dark:      #183fb4, // primary-600 (darker for hover/active)
    secondary-light:   #fa7f38, // secondary-400
    secondary-dark:    #c74c05, // secondary-600
    accent-light:      #e94974, // accent-400
    accent-dark:       #b61641, // accent-600

    // Define standard state colors (Choose appropriate shades from scale or keep separate)
    success:         #10b981, // Keeping existing green, or map to a scale value
    error:           #e31c51, // Mapped to accent-500
    warning:         #f95f06, // Mapped to secondary-500
    info:            #1d4ee2, // Mapped to text-500 (or primary-500)

    // Component Specific (Map to new scale values)
    header-bg:       var(--surface-bg), // Use surface white
    sidebar-bg:      #0c205a, // primary-800 (dark primary for sidebar)
    footer-bg:       var(--surface-alt-bg), // Use alt surface
    footer-text:     var(--text-secondary),
    footer-link:     var(--text-link),
    footer-link-hover: var(--text-link-hover),
  ),
  dark: (
    // --- Map existing semantic names to new scale values ---
    text:           #e8edfc, // text-950
    background:     #020817, // background-50
    primary:        #1f4fe0, // primary-500 (same hex, corresponds to dark primary-500)
    secondary:      #f95f06, // secondary-500 (same hex, corresponds to dark secondary-500)
    accent:         #e31c51, // accent-500 (same hex, corresponds to dark accent-500)

    // Semantic Names (Mapping existing names to new scale values)
    text-primary:    #e8edfc, // text-950 (main text often primary in dark)
    text-secondary:  #a5b8f3, // text-800 (slightly dimmer text)
    text-muted:      #4a72e8, // text-600 (dimmest text)
    text-inverted:   #ebecf0, // text-50 (text on light colored backgrounds)
    text-link:       #7895ed, // text-700 (link color)
    text-link-hover: #a5b8f3, // text-800 (lighter link hover)

    body-bg:         #020817, // background-50
    surface-bg:      #0d2c73, // background-100 (card/modal bg)
    surface-alt-bg:  #0a215c, // background-200 (table header bg)

    border-color:       #0f328a, // background-300 (standard border)
    border-color-strong: #1342b9, // background-400 (stronger border)

    // Use the '-500' as the base for primary/secondary/accent if not defined above
    primary-light:     #4b72e7, // primary-600 (Lighter shade for hover/active in dark)
    primary-dark:      #183fb4, // primary-400 (Darker shade)
    secondary-light:   #fa7f38, // secondary-600
    secondary-dark:    #c74c05, // secondary-400
    accent-light:      #e94974, // accent-600
    accent-dark:       #b61641, // accent-400

    // Define standard state colors (Choose appropriate shades from scale or keep separate)
    success:         #34d399, // Keeping existing green, or map to a scale value
    error:           #e31c51, // Mapped to accent-500
    warning:         #f95f06, // Mapped to secondary-500
    info:            #4a72e8, // Mapped to text-600 (or primary-600)

    // Component Specific (Map to new scale values)
    header-bg:       var(--surface-bg),
    sidebar-bg:      #06102d, // primary-900 (darker sidebar)
    footer-bg:       var(--surface-alt-bg),
    footer-text:     var(--text-secondary),
    footer-link:     var(--text-link),
    footer-link-hover: var(--text-link-hover),
  )
);

// --------------------------------------------------------------------------
// Generate CSS Custom Properties from Theme Map
// --------------------------------------------------------------------------
// Creates the :root variables based on the light theme map.
:root {
    // Generate CSS variables from the 'light' theme map
    @each $key, $value in map.get($themes, light) {
      --#{$key}: #{$value};
    }

    // --- Add derived/alpha colors manually or via loop if needed ---
    // Define RGB versions for use in rgba()
    --primary-rgb: #{color.red(map.get(map.get($themes, light), primary))}, #{color.green(map.get(map.get($themes, light), primary))}, #{color.blue(map.get(map.get($themes, light), primary))};
    --success-rgb: #{color.red(map.get(map.get($themes, light), success))}, #{color.green(map.get(map.get($themes, light), success))}, #{color.blue(map.get(map.get($themes, light), success))};
    --error-rgb: #{color.red(map.get(map.get($themes, light), error))}, #{color.green(map.get(map.get($themes, light), error))}, #{color.blue(map.get(map.get($themes, light), error))};
    --warning-rgb: #{color.red(map.get(map.get($themes, light), warning))}, #{color.green(map.get(map.get($themes, light), warning))}, #{color.blue(map.get(map.get($themes, light), warning))};
    --info-rgb: #{color.red(map.get(map.get($themes, light), info))}, #{color.green(map.get(map.get($themes, light), info))}, #{color.blue(map.get(map.get($themes, light), info))};
    --accent-rgb: #{color.red(map.get(map.get($themes, light), accent))}, #{color.green(map.get(map.get($themes, light), accent))}, #{color.blue(map.get(map.get($themes, light), accent))};
    --text-muted-rgb: #{color.red(map.get(map.get($themes, light), text-muted))}, #{color.green(map.get(map.get($themes, light), text-muted))}, #{color.blue(map.get(map.get($themes, light), text-muted))};
    --secondary-rgb: #{color.red(map.get(map.get($themes, light), secondary))}, #{color.green(map.get(map.get($themes, light), secondary))}, #{color.blue(map.get(map.get($themes, light), secondary))};


    --primary-alpha-10: rgba(var(--primary-rgb), 0.1);

    // Add Alpha Badge Backgrounds based on state colors
    --badge-info-bg-alpha: rgba(var(--info-rgb), 0.15);
    --badge-success-bg-alpha: rgba(var(--success-rgb), 0.15);
    --badge-warning-bg-alpha: rgba(var(--warning-rgb), 0.15);
    --badge-error-bg-alpha: rgba(var(--error-rgb), 0.15);

    // Define status/urgency colors (can map to state colors or be unique)
    --status-unassigned-color: var(--warning);
    --status-assigned-color: var(--info);
    --status-progress-color: var(--secondary); // Using secondary color now
    --status-closed-color: var(--text-muted);

    --urgency-low-color: var(--info);
    --urgency-medium-color: var(--success);
    --urgency-high-color: var(--warning);
    --urgency-critical-color: var(--error);

    // Define hover/darker versions if needed by mixins
    --error-dark: #{color.adjust(map.get(map.get($themes, light), error), $blackness: 10%)};
}


// --------------------------------------------------------------------------
// Non-Color Variables (Keep existing definitions)
// --------------------------------------------------------------------------
// Typography
$font-family-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
$font-family-mono: 'Fira Code', 'Source Code Pro', Menlo, Monaco, Consolas, 'Courier New', monospace;
$font-size-xs: 0.75rem;    // 12px
$font-size-sm: 0.875rem;   // 14px
$font-size-base: 1rem;     // 16px
$font-size-lg: 1.125rem;   // 18px
$font-size-xl: 1.25rem;    // 20px
$font-size-2xl: 1.5rem;    // 24px
$font-size-3xl: 1.875rem;  // 30px
$font-size-4xl: 2.25rem;   // 36px
$font-weight-light: 300;
$font-weight-normal: 400;
$font-weight-medium: 500;
$font-weight-semibold: 600;
$font-weight-bold: 700;

// Spacing (Based on 0.25rem = 4px scale)
$spacing-0: 0;
$spacing-1: 0.25rem;  // 4px
$spacing-2: 0.5rem;   // 8px
$spacing-3: 0.75rem;  // 12px
$spacing-4: 1rem;     // 16px
$spacing-5: 1.25rem;  // 20px
$spacing-6: 1.5rem;   // 24px
$spacing-8: 2rem;     // 32px
$spacing-10: 2.5rem;  // 40px
$spacing-12: 3rem;    // 48px
$spacing-16: 4rem;    // 64px

// Borders
$border-radius-sm: 0.125rem; // 2px
$border-radius: 0.25rem;    // 4px
$border-radius-md: 0.375rem; // 6px
$border-radius-lg: 0.5rem;    // 8px
$border-radius-xl: 0.75rem;   // 12px
$border-radius-full: 9999px;

// Shadows
$shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
$shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
$shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
$shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);

// Layout
$header-height: 4rem;
$sidebar-width: 16rem;
$sidebar-collapsed-width: 4.5rem;
$max-content-width: 1280px;

// Z-index levels
$z-index-dropdown: 1000;
$z-index-sticky: 1020;
$z-index-fixed: 1030;

// Transitions
$transition-fast: 150ms ease;
$transition-medium: 300ms ease;
$transition-slow: 500ms ease;

// Media query breakpoints
$breakpoint-sm: 640px;
$breakpoint-md: 768px;
$breakpoint-lg: 1024px;
$breakpoint-xl: 1280px;
$breakpoint-2xl: 1536px;
