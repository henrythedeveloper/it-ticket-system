version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/certs:/etc/nginx/certs
    networks:
      - helpdesk-network

  # Frontend service (React/TypeScript)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - PUBLIC_API_URL=/api
    environment:
      - NODE_ENV=production
      - PUBLIC_API_URL=/api
    networks:
      - helpdesk-network
    depends_on:
      - backend
      
  # Add MailDev Service
  maildev:
    image: maildev/maildev # Use the official image
    ports:
      - "1080:1080" # Web UI port
      - "1025:1025" # SMTP port
    restart: unless-stopped
    networks:
      - helpdesk-network

  # Backend API service (Go)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - PORTAL_BASE_URL=${PORTAL_BASE_URL}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=disable
      - EMAIL_PROVIDER=smtp # Change provider name
      - EMAIL_FROM=${EMAIL_FROM:-test@helpdesk.local} # Use a local/dummy from address
      - SMTP_HOST=maildev # Service name in Docker network
      - SMTP_PORT=1025 # Default MailDev SMTP port
      - SMTP_USER= # MailDev default has no auth
      - SMTP_PASSWORD= # MailDev default has no auth
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8080
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    networks:
      - helpdesk-network

  # PostgreSQL database
  postgres:
    image: postgres:17.4-alpine3.21
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/db/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    ports:
      - "5433:5432"
    networks:
      - helpdesk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MinIO for file storage (S3 compatible)
  minio:
    image: minio/minio
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
      - MINIO_SERVER_URL=http://localhost:9000
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - helpdesk-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 3

  # MinIO bucket initializer
  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc alias set myminio http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY} &&
        /usr/bin/mc mb -p myminio/${S3_BUCKET} || true
      "
    networks:
      - helpdesk-network

networks:
  helpdesk-network:
    driver: bridge

volumes:
  postgres-data:
  minio-data: